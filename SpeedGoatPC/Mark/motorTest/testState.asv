%% Setup

rawData = readtable('torque_test3.csv');dataLen = height(rawData);

zeroState = zeros(dataLen,1);
stateChange = 0.5*sin(5*linspace(0,2*pi,dataLen))';
state = "position"; % torque state test = velocity state test
communication_rate = 500;
Kp = 50; %100;
Kd = 0.1; %10;


%% 


loopLen = dataLen/100;
n = rawData(1:dataLen,"node");
thULA = rawData(1:dataLen,"thULA");
thURA = rawData(1:dataLen,"thURA");
thULB = rawData(1:dataLen,"thULB");
thURB = rawData(1:dataLen,"thURB");

dthULA = rawData(1:dataLen,"dthULA");
dthURA = rawData(1:dataLen,"dthURA");
dthULB = rawData(1:dataLen,"dthULB");
dthURB = rawData(1:dataLen,"dthURB");

tLeftA = rawData(1:dataLen,"tLeftA");
tLeftB = rawData(1:dataLen,"tLeftB");
tRightA = rawData(1:dataLen,"tRightA");
tRightB = rawData(1:dataLen,"tRightB");

n = table2array(n);
% thULA = table2array(thULA);
% thURA = table2array(thURA);
% thULB = table2array(thULB);
% thURB = table2array(thURB);
% 
% dthULA = table2array(dthULA);
% dthURA = table2array(dthURA);
% dthULB = table2array(dthULB);
% dthURB = table2array(dthURB);
% 
% tLeftA = table2array(tLeftA);
% tLeftB = table2array(tLeftB);
% tRightA = table2array(tRightA);
% tRightB = table2array(tRightB);

V_avg = 0.4*sqrt(0.38*9.8);
TT = (0.8/V_avg)*loopLen;

t = [0:TT/(dataLen-1):TT];
t = transpose(t);

tInterp = linspace(0,loopLen,communication_rate*loopLen);


thULAi = interp1(t,stateChange,tInterp);
thURAi = interp1(t,stateChange,tInterp);
thULBi = interp1(t,stateChange,tInterp);
thURBi = interp1(t,stateChange,tInterp);

dthULAi = interp1(t,zeroState,tInterp);
dthURAi = interp1(t,zeroState,tInterp);
dthULBi = interp1(t,zeroState,tInterp);
dthURBi = interp1(t,zeroState,tInterp);

tLeftAi = interp1(t,zeroState,tInterp);
tLeftBi = interp1(t,zeroState,tInterp);
tRightAi = interp1(t,zeroState,tInterp);
tRightBi = interp1(t,zeroState,tInterp);

zero_offset = 0.7;
thULA = (-thULAi-zero_offset);
thURA = (pi-thURAi+zero_offset);
thULB = (-thULBi-zero_offset);
thURB = (pi-thURBi+zero_offset);
thULA = thULA';
thURA = thURA';
thULB = thULB';
thURB = thURB';

dthULA = -dthULAi';
dthURA = -dthURAi';
dthULB = -dthULBi';
dthURB = -dthURBi';

tLeftA = tLeftAi';
tLeftB = tLeftBi';
tRightA = tRightAi';
tRightB = tRightBi';

for i = 1:1:5
    thULB = cat(1,thULB,thULB);
    dthULB = cat(1,dthULB,dthULB);
    tLeftB = cat(1,tLeftB,tLeftB);
    thURB = cat(1,thURB,thURB);
    dthURB = cat(1,dthURB,dthURB);
    tRightB = cat(1,tRightB,tRightB);
    thURA = cat(1,thURA,thURA);
    dthURA = cat(1,dthURA,dthURA);
    tRightA = cat(1,tRightA,tRightA);
    thULA = cat(1,thULA,thULA);
    dthULA = cat(1,dthULA,dthULA);
    tLeftA = cat(1,tLeftA,tLeftA);
end

m3_pos = struct('values', thULB);
m3_vel = struct('values', dthULB);
m3_tau = struct('values', tLeftB);

m2_pos = struct('values', thURB);
m2_vel = struct('values', dthURB);
m2_tau = struct('values', tRightB);

m1_pos = struct('values', thURA);
m1_vel = struct('values', dthURA);
m1_tau = struct('values', tRightA);

m4_pos = struct('values', thULA);
m4_vel = struct('values', dthULA);
m4_tau = struct('values', tLeftA);

m3_arr = struct('time', [], 'signals',m3_pos);
dm3_arr = struct('time', [], 'signals',m3_vel);
tm3_arr = struct('time', [], 'signals',m3_tau);

m2_arr = struct('time', [], 'signals',m2_pos);
dm2_arr = struct('time', [], 'signals',m2_vel);
tm2_arr = struct('time', [], 'signals',m2_tau);

m1_arr = struct('time', [], 'signals',m1_pos);
dm1_arr = struct('time', [], 'signals',m1_vel);
tm1_arr = struct('time', [], 'signals',m1_tau);

m4_arr = struct('time', [], 'signals',m4_pos);
dm4_arr = struct('time', [], 'signals',m4_vel);
tm4_arr = struct('time', [], 'signals',m4_tau);
